generator client {
  provider = "prisma-client-js"
  output   = "./prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  START
  FINISH
  INTERMEDIATE
}

model Checkpoint {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  type     Type?
  hint     String?
  eventId  Int?    @map("event_id")

  event           Event?               @relation(fields: [event_id], references: [id])
  fromDistances   CheckpointDistance[] @relation("FromCheckpoint")
  toDistances     CheckpointDistance[] @relation("ToCheckpoint")
  group           Group[]
  penalty         Penalty[]
  routeCheckpoint RouteCheckpoint[]
}

model Event {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  startTime      DateTime? @map("start_time")
  endTime        DateTime? @map("end_time")
  minRouteTime   Int?      @map("min_route_time")
  maxRouteTime   Int?      @map("max_route_time")

  checkpoints        Checkpoint[]
  group              Group[]
  route              Route[]
  checkpointDistance CheckpointDistance[]
  penalty            Penalty[]
}

model Group {
  id                 Int       @id @default(autoincrement())
  name               String    @unique
  members            Int       @default(-1)
  eventId            Int?      @map("event_id")
  finishTime         DateTime? @map("finish_time")
  nextCheckpointId   Int?      @map("next_checkpoint_id")
  routeId            Int?      @map("route_id")
  disqualified       Boolean   @default(false)

  event           Event?      @relation(fields: [event_id], references: [id])
  route           Route?      @relation(fields: [route_id], references: [id])
  next_checkpoint Checkpoint? @relation(fields: [next_checkpoint_id], references: [id])
  penalty         Penalty[]
}

model Route {
  id         Int  @id @default(autoincrement())
  routeTime  Int  @map("route_time")
  eventId    Int? @map("event_id")

  event      Event?            @relation(fields: [event_id], references: [id])
  routeSteps RouteCheckpoint[]
  group      Group[]
}

model RouteCheckpoint {
  id            Int @id @default(autoincrement())
  routeId       Int @map("route_id")
  checkpointId  Int @map("checkpoint_id")
  order         Int

  route      Route      @relation(fields: [route_id], references: [id])
  checkpoint Checkpoint @relation(fields: [checkpoint_id], references: [id])

  @@unique([route_id, order])
}

model CheckpointDistance {
  id       Int  @id @default(autoincrement())
  fromId   Int  @map("from_id")
  toId     Int  @map("to_id")
  time     Int
  eventId  Int? @map("event_id")

  from  Checkpoint @relation("FromCheckpoint", fields: [from_id], references: [id], onDelete: Cascade)
  to    Checkpoint @relation("ToCheckpoint", fields: [to_id], references: [id], onDelete: Cascade)
  event Event?     @relation(fields: [event_id], references: [id])

  @@unique([from_id, to_id, event_id])
}

model Penalty {
  id              Int  @id @default(autoincrement())
  groupId         Int  @map("group_id")
  time            Int
  checkpointId    Int? @map("checkpoint_id")
  eventId         Int? @map("event_id")

  group        Group       @relation(fields: [group_id], references: [id], onDelete: Cascade)
  event        Event?      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  checkpoint   Checkpoint? @relation(fields: [checkpoint_id], references: [id], onDelete: Cascade)
}
